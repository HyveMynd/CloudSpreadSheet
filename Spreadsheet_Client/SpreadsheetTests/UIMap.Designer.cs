// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetTests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public partial class UIMap
    {
        
        /// <summary>
        /// NumberTest - Use 'NumberTestParams' to pass parameters into this method.
        /// </summary>
        public void NumberTest()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UISpreadsheetWindow.UITextBox1Window.UITextBox1Edit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.NumberTestParams.UISpreadsheetWindowExePath, this.NumberTestParams.UISpreadsheetWindowAlternateExePath);

            // Type '34' in 'textBox1' text box
            uITextBox1Edit.Text = this.NumberTestParams.UITextBox1EditText;

            // Type '{Enter}' in 'textBox1' text box
            Keyboard.SendKeys(uITextBox1Edit, this.NumberTestParams.UITextBox1EditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UISpreadsheetWindow.UITextBox1Window.UITextBox1Edit;
            #endregion

            // Verify that 'textBox1' text box's property 'Text' equals '34'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UITextBox1EditText, uITextBox1Edit.Text);
        }
        
        /// <summary>
        /// StringTest - Use 'StringTestParams' to pass parameters into this method.
        /// </summary>
        public void StringTest()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinEdit uITextBox1Edit = this.UISpreadsheetWindow11.UITextBox1Window.UITextBox1Edit;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(39, 9));

            // Type 'Hi' in 'textBox1' text box
            uITextBox1Edit.Text = this.StringTestParams.UITextBox1EditText;

            // Type '{Enter}' in 'textBox1' text box
            Keyboard.SendKeys(uITextBox1Edit, this.StringTestParams.UITextBox1EditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UISpreadsheetWindow2.UITextBox1Window.UITextBox1Edit;
            #endregion

            // Verify that 'textBox1' text box's property 'Text' equals 'Hi'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UITextBox1EditText, uITextBox1Edit.Text);
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow2.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIYesButton = this.UISpreadsheetWindow12.UIYesWindow.UIYesButton;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinButton uIOKButton = this.UISaveAsWindow1.UISaveAsPane.UIOKButton;
            WinButton uINOButton = this.UIOverwriteWindow.UINOWindow.UINOButton;
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton1 = this.UIOverwriteWindow.UIYesWindow.UIYesButton;
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinEdit uITextBox1Edit = this.UISpreadsheetWindow11.UITextBox1Window.UITextBox1Edit;
            WinMenuItem uICloseMenuItem1 = this.UISpreadsheetWindow11.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(79, 8));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(61, 9));

            // Select 'D:\' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod1Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod1Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(29, 13));

            // Select 'MyDemo.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod1Params.UIFilenameComboBoxEditableItem1;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod1Params.UIFilenameEditSendKeys1, ModifierKeys.None);

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(56, 12));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(54, 16));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(31, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(40, 16));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(41, 13));

            // Type 'adflfa' in 'textBox1' text box
            uITextBox1Edit.Text = this.RecordedMethod1Params.UITextBox1EditText;

            // Type '{Enter}' in 'textBox1' text box
            Keyboard.SendKeys(uITextBox1Edit, this.RecordedMethod1Params.UITextBox1EditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem1, new Point(84, 12));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(41, 16));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(37, 18));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(54, 16));
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UISpreadsheetWindow.UITextBox1Window.UITextBox1Edit;
            #endregion

            // Verify that 'textBox1' text box's property 'Text' equals '34'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UITextBox1EditText, uITextBox1Edit.Text);
        }
        
        /// <summary>
        /// Open
        /// </summary>
        public void Open()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UISpreadSheetListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(74, 3));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(94, 9));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(20, 10));
        }
        
        /// <summary>
        /// OpenTestMethod - Use 'OpenTestMethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void OpenTestMethod()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UISpreadsheetWindow.UITextBox1Window.UITextBox1Edit;
            #endregion

            // Verify that 'textBox1' text box's property 'Text' equals '34'
            Assert.AreEqual(this.OpenTestMethodExpectedValues.UITextBox1EditText, uITextBox1Edit.Text);
        }
        
        /// <summary>
        /// SaveAs - Use 'SaveAsParams' to pass parameters into this method.
        /// </summary>
        public void SaveAs()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIMyDemoListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinMenuItem uISaveAsMenuItem = this.UICUsersBrentDocumentsWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(80, 6));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(21, 10));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(37, 9));

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(71, 10));

            // Select 'shee2' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveAsParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(33, 4));
        }
        
        /// <summary>
        /// sas - Use 'sasExpectedValues' to pass parameters into this method.
        /// </summary>
        public void sas()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UICUsersBrentDocumentsWindow1.UIItem2Window.UITextBox1Edit;
            #endregion

            // Verify that 'textBox1' text box's property 'Text' equals '2'
            Assert.AreEqual(this.sasExpectedValues.UITextBox1EditText, uITextBox1Edit.Text);
        }
        
        /// <summary>
        /// CloseAll
        /// </summary>
        public void CloseAll()
        {
            #region Variable Declarations
            WinMenuItem uIExitMenuItem = this.UICUsersBrentDocumentsWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UIExitMenuItem;
            WinButton uIYesButton = this.UICloseWindowsWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(70, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(39, 7));
        }
        
        /// <summary>
        /// Testtwostring - Use 'TesttwostringParams' to pass parameters into this method.
        /// </summary>
        public void Testtwostring()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UISpreadsheetWindow.UITextBox1Window.UITextBox1Edit;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UISpreadSheetListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow3 = ApplicationUnderTest.Launch(this.TesttwostringParams.UISpreadsheetWindow3ExePath, this.TesttwostringParams.UISpreadsheetWindow3AlternateExePath);

            // Type 'adf' in 'textBox1' text box
            uITextBox1Edit.Text = this.TesttwostringParams.UITextBox1EditText;

            // Type '{Enter}' in 'textBox1' text box
            Keyboard.SendKeys(uITextBox1Edit, this.TesttwostringParams.UITextBox1EditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(77, 10));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(38, 11));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(41, 13));
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UISpreadsheetWindow.UITextBox1Window.UITextBox1Edit;
            #endregion

            // Verify that 'textBox1' text box's property 'Text' equals 'vsdtyjh'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UITextBox1EditText, uITextBox1Edit.Text);
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinMenuItem uIExitMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIExitMenuItem;
            WinButton uIYesButton = this.UICloseWindowsWindow.UIYesWindow.UIYesButton;
            WinButton uIYesButton1 = this.UISpreadsheetWindow12.UIYesWindow.UIYesButton;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton2 = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(73, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(32, 6));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(66, 13));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(57, 8));

            // Click '&Yes' button
            Mouse.Click(uIYesButton2, new Point(40, 7));
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIShee2ListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinEdit uITextBox1Edit = this.UICUsersBrentDocumentsWindow1.UIItem2Window.UITextBox1Edit;
            WinMenuItem uISaveAsMenuItem = this.UICUsersBrentDocumentsWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinMenuItem uICloseMenuItem = this.UICUsersBrentDocumentsWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinEdit uITextBox1Edit1 = this.UISpreadsheetWindow.UITextBox1Window.UITextBox1Edit;
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow5.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinMenuItem uIHelpMenuItem = this.UISpreadsheetWindow6.UIMenuStrip1MenuBar.UIHelpMenuItem;
            WinButton uIOKButton = this.UIHelpWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIExitMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIExitMenuItem;
            WinButton uIYesButton = this.UICloseWindowsWindow.UIYesWindow.UIYesButton;
            WinButton uINOButton = this.UISpreadsheetWindow12.UINOWindow.UINOButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow4 = ApplicationUnderTest.Launch(this.RecordedMethod3Params.UISpreadsheetWindow4ExePath, this.RecordedMethod3Params.UISpreadsheetWindow4AlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(74, 10));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(37, 7));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(29, 15));

            // Type '245' in 'textBox1' text box
            uITextBox1Edit.Text = this.RecordedMethod3Params.UITextBox1EditText;

            // Type '{Enter}' in 'textBox1' text box
            Keyboard.SendKeys(uITextBox1Edit, this.RecordedMethod3Params.UITextBox1EditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(46, 9));

            // Select 'SpreadSheet2' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod3Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(60, 7));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(89, 1));

            // Type 'sfgs' in 'textBox1' text box
            uITextBox1Edit1.Text = this.RecordedMethod3Params.UITextBox1EditText1;

            // Type '{Enter}' in 'textBox1' text box
            Keyboard.SendKeys(uITextBox1Edit1, this.RecordedMethod3Params.UITextBox1EditSendKeys1, ModifierKeys.None);

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(23, 13));

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(13, 15));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(58, 10));

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(73, 16));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(43, 18));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(49, 20));
        }
        
        /// <summary>
        /// CloseTest - Use 'CloseTestParams' to pass parameters into this method.
        /// </summary>
        public void CloseTest()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UISpreadsheetWindow.UITextBox1Window.UITextBox1Edit;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow8.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIYesButton = this.UISpreadsheetWindow12.UIYesWindow.UIYesButton;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton1 = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow7 = ApplicationUnderTest.Launch(this.CloseTestParams.UISpreadsheetWindow7ExePath, this.CloseTestParams.UISpreadsheetWindow7AlternateExePath);

            // Type 'sd' in 'textBox1' text box
            uITextBox1Edit.Text = this.CloseTestParams.UITextBox1EditText;

            // Type '{Enter}' in 'textBox1' text box
            Keyboard.SendKeys(uITextBox1Edit, this.CloseTestParams.UITextBox1EditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(83, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(57, 12));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(51, 8));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(34, 13));
        }
        
        /// <summary>
        /// Help - Use 'HelpParams' to pass parameters into this method.
        /// </summary>
        public void Help()
        {
            #region Variable Declarations
            WinMenuItem uIHelpMenuItem = this.UISpreadsheetWindow6.UIMenuStrip1MenuBar.UIHelpMenuItem;
            WinButton uIOKButton = this.UIHelpWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIExitMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIExitMenuItem;
            WinButton uIYesButton = this.UICloseWindowsWindow.UIYesWindow.UIYesButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow9 = ApplicationUnderTest.Launch(this.HelpParams.UISpreadsheetWindow9ExePath, this.HelpParams.UISpreadsheetWindow9AlternateExePath);

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(15, 17));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(56, 11));

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(73, 3));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(74, 10));
        }
        
        /// <summary>
        /// New - Use 'NewParams' to pass parameters into this method.
        /// </summary>
        public void New()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIExitMenuItem = this.UISpreadsheetWindow11.UIMenuStrip1MenuBar.UIFileMenuItem.UIExitMenuItem;
            WinButton uIYesButton = this.UICloseWindowsWindow.UIYesWindow.UIYesButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow10 = ApplicationUnderTest.Launch(this.NewParams.UISpreadsheetWindow10ExePath, this.NewParams.UISpreadsheetWindow10AlternateExePath);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(30, 11));

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(77, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(66, 13));
        }
        
        /// <summary>
        /// Closenow - Use 'ClosenowParams' to pass parameters into this method.
        /// </summary>
        public void Closenow()
        {
            #region Variable Declarations
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow8.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow13 = ApplicationUnderTest.Launch(this.ClosenowParams.UISpreadsheetWindow13ExePath, this.ClosenowParams.UISpreadsheetWindow13AlternateExePath);

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(83, 12));
        }
        
        /// <summary>
        /// MultipleWindows - Use 'MultipleWindowsParams' to pass parameters into this method.
        /// </summary>
        public void MultipleWindows()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UISpreadsheetWindow.UITextBox1Window.UITextBox1Edit;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow15.UIItemWindow.UISpreadsheetPanel1Client;
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow16.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIExitMenuItem = this.UISpreadsheetWindow11.UIMenuStrip1MenuBar.UIFileMenuItem.UIExitMenuItem;
            WinButton uIYesButton = this.UICloseWindowsWindow.UIYesWindow.UIYesButton;
            WinButton uIYesButton1 = this.UISpreadsheetWindow12.UIYesWindow.UIYesButton;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton2 = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow14 = ApplicationUnderTest.Launch(this.MultipleWindowsParams.UISpreadsheetWindow14ExePath, this.MultipleWindowsParams.UISpreadsheetWindow14AlternateExePath);

            // Type '2' in 'textBox1' text box
            uITextBox1Edit.Text = this.MultipleWindowsParams.UITextBox1EditText;

            // Type '{Enter}' in 'textBox1' text box
            Keyboard.SendKeys(uITextBox1Edit, this.MultipleWindowsParams.UITextBox1EditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(162, 34));

            // Type '9' in 'textBox1' text box
            uITextBox1Edit.Text = this.MultipleWindowsParams.UITextBox1EditText1;

            // Type '{Enter}' in 'textBox1' text box
            Keyboard.SendKeys(uITextBox1Edit, this.MultipleWindowsParams.UITextBox1EditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(246, 40));

            // Type '=A1+B1' in 'textBox1' text box
            uITextBox1Edit.Text = this.MultipleWindowsParams.UITextBox1EditText2;

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(38, 13));

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(60, 4));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(48, 8));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(42, 8));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(20, 18));

            // Click '&Yes' button
            Mouse.Click(uIYesButton2, new Point(11, 15));
        }
        
        /// <summary>
        /// ExitMany - Use 'ExitManyParams' to pass parameters into this method.
        /// </summary>
        public void ExitMany()
        {
            #region Variable Declarations
            WinEdit uITextBox1Edit = this.UISpreadsheetWindow.UITextBox1Window.UITextBox1Edit;
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow18.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetWindow11.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uITextBox1Edit1 = this.UISpreadsheetWindow11.UITextBox1Window.UITextBox1Edit;
            WinMenuItem uINewMenuItem1 = this.UISpreadsheetWindow11.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinClient uISpreadsheetPanel1Client1 = this.UISpreadsheetWindow21.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uITextBox1Edit2 = this.UISpreadsheetWindow21.UITextBox1Window.UITextBox1Edit;
            WinMenuItem uIExitMenuItem = this.UISpreadsheetWindow21.UIMenuStrip1MenuBar.UIFileMenuItem.UIExitMenuItem;
            WinButton uIYesButton = this.UICloseWindowsWindow.UIYesWindow.UIYesButton;
            WinButton uIYesButton1 = this.UISpreadsheetWindow12.UIYesWindow.UIYesButton;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton2 = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            WinButton uINOButton = this.UISpreadsheetWindow12.UINOWindow.UINOButton;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow17 = ApplicationUnderTest.Launch(this.ExitManyParams.UISpreadsheetWindow17ExePath, this.ExitManyParams.UISpreadsheetWindow17AlternateExePath);

            // Type 'asdf' in 'textBox1' text box
            uITextBox1Edit.Text = this.ExitManyParams.UITextBox1EditText;

            // Type 'Shift + {Enter}' in 'textBox1' text box
            Keyboard.SendKeys(uITextBox1Edit, this.ExitManyParams.UITextBox1EditSendKeys, ModifierKeys.Shift);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(32, 10));

            // Last mouse action was not recorded.

            // Type 'ad' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client, this.ExitManyParams.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type 'dsfa' in 'textBox1' text box
            uITextBox1Edit1.Text = this.ExitManyParams.UITextBox1EditText1;

            // Type '{Enter}' in 'textBox1' text box
            Keyboard.SendKeys(uITextBox1Edit1, this.ExitManyParams.UITextBox1EditSendKeys1, ModifierKeys.None);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem1, new Point(42, 11));

            // Last mouse action was not recorded.

            // Type 's' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.ExitManyParams.UISpreadsheetPanel1ClientSendKeys1, ModifierKeys.None);

            // Last mouse action was not recorded.

            // Type 'sdfas' in 'textBox1' text box
            uITextBox1Edit2.Text = this.ExitManyParams.UITextBox1EditText2;

            // Type '{Enter}' in 'textBox1' text box
            Keyboard.SendKeys(uITextBox1Edit2, this.ExitManyParams.UITextBox1EditSendKeys2, ModifierKeys.None);

            // Click 'File' -> 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(81, 1));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(46, 5));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(52, 12));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(54, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton2, new Point(52, 5));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(43, 17));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(47, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton2, new Point(22, 12));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(42, 10));
        }
        
        #region Properties
        public virtual NumberTestParams NumberTestParams
        {
            get
            {
                if ((this.mNumberTestParams == null))
                {
                    this.mNumberTestParams = new NumberTestParams();
                }
                return this.mNumberTestParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual StringTestParams StringTestParams
        {
            get
            {
                if ((this.mStringTestParams == null))
                {
                    this.mStringTestParams = new StringTestParams();
                }
                return this.mStringTestParams;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual OpenTestMethodExpectedValues OpenTestMethodExpectedValues
        {
            get
            {
                if ((this.mOpenTestMethodExpectedValues == null))
                {
                    this.mOpenTestMethodExpectedValues = new OpenTestMethodExpectedValues();
                }
                return this.mOpenTestMethodExpectedValues;
            }
        }
        
        public virtual SaveAsParams SaveAsParams
        {
            get
            {
                if ((this.mSaveAsParams == null))
                {
                    this.mSaveAsParams = new SaveAsParams();
                }
                return this.mSaveAsParams;
            }
        }
        
        public virtual sasExpectedValues sasExpectedValues
        {
            get
            {
                if ((this.msasExpectedValues == null))
                {
                    this.msasExpectedValues = new sasExpectedValues();
                }
                return this.msasExpectedValues;
            }
        }
        
        public virtual TesttwostringParams TesttwostringParams
        {
            get
            {
                if ((this.mTesttwostringParams == null))
                {
                    this.mTesttwostringParams = new TesttwostringParams();
                }
                return this.mTesttwostringParams;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual CloseTestParams CloseTestParams
        {
            get
            {
                if ((this.mCloseTestParams == null))
                {
                    this.mCloseTestParams = new CloseTestParams();
                }
                return this.mCloseTestParams;
            }
        }
        
        public virtual HelpParams HelpParams
        {
            get
            {
                if ((this.mHelpParams == null))
                {
                    this.mHelpParams = new HelpParams();
                }
                return this.mHelpParams;
            }
        }
        
        public virtual NewParams NewParams
        {
            get
            {
                if ((this.mNewParams == null))
                {
                    this.mNewParams = new NewParams();
                }
                return this.mNewParams;
            }
        }
        
        public virtual ClosenowParams ClosenowParams
        {
            get
            {
                if ((this.mClosenowParams == null))
                {
                    this.mClosenowParams = new ClosenowParams();
                }
                return this.mClosenowParams;
            }
        }
        
        public virtual MultipleWindowsParams MultipleWindowsParams
        {
            get
            {
                if ((this.mMultipleWindowsParams == null))
                {
                    this.mMultipleWindowsParams = new MultipleWindowsParams();
                }
                return this.mMultipleWindowsParams;
            }
        }
        
        public virtual ExitManyParams ExitManyParams
        {
            get
            {
                if ((this.mExitManyParams == null))
                {
                    this.mExitManyParams = new ExitManyParams();
                }
                return this.mExitManyParams;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UISpreadsheetWindow1 UISpreadsheetWindow1
        {
            get
            {
                if ((this.mUISpreadsheetWindow1 == null))
                {
                    this.mUISpreadsheetWindow1 = new UISpreadsheetWindow1();
                }
                return this.mUISpreadsheetWindow1;
            }
        }
        
        public UISpreadsheetWindow11 UISpreadsheetWindow11
        {
            get
            {
                if ((this.mUISpreadsheetWindow11 == null))
                {
                    this.mUISpreadsheetWindow11 = new UISpreadsheetWindow11();
                }
                return this.mUISpreadsheetWindow11;
            }
        }
        
        public UISpreadsheetWindow2 UISpreadsheetWindow2
        {
            get
            {
                if ((this.mUISpreadsheetWindow2 == null))
                {
                    this.mUISpreadsheetWindow2 = new UISpreadsheetWindow2();
                }
                return this.mUISpreadsheetWindow2;
            }
        }
        
        public UISpreadsheetWindow12 UISpreadsheetWindow12
        {
            get
            {
                if ((this.mUISpreadsheetWindow12 == null))
                {
                    this.mUISpreadsheetWindow12 = new UISpreadsheetWindow12();
                }
                return this.mUISpreadsheetWindow12;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UISaveAsWindow1 UISaveAsWindow1
        {
            get
            {
                if ((this.mUISaveAsWindow1 == null))
                {
                    this.mUISaveAsWindow1 = new UISaveAsWindow1();
                }
                return this.mUISaveAsWindow1;
            }
        }
        
        public UIOverwriteWindow UIOverwriteWindow
        {
            get
            {
                if ((this.mUIOverwriteWindow == null))
                {
                    this.mUIOverwriteWindow = new UIOverwriteWindow();
                }
                return this.mUIOverwriteWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UICUsersBrentDocumentsWindow1 UICUsersBrentDocumentsWindow1
        {
            get
            {
                if ((this.mUICUsersBrentDocumentsWindow1 == null))
                {
                    this.mUICUsersBrentDocumentsWindow1 = new UICUsersBrentDocumentsWindow1();
                }
                return this.mUICUsersBrentDocumentsWindow1;
            }
        }
        
        public UICloseWindowsWindow UICloseWindowsWindow
        {
            get
            {
                if ((this.mUICloseWindowsWindow == null))
                {
                    this.mUICloseWindowsWindow = new UICloseWindowsWindow();
                }
                return this.mUICloseWindowsWindow;
            }
        }
        
        public UISpreadsheetWindow3 UISpreadsheetWindow3
        {
            get
            {
                if ((this.mUISpreadsheetWindow3 == null))
                {
                    this.mUISpreadsheetWindow3 = new UISpreadsheetWindow3();
                }
                return this.mUISpreadsheetWindow3;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UISpreadsheetWindow4 UISpreadsheetWindow4
        {
            get
            {
                if ((this.mUISpreadsheetWindow4 == null))
                {
                    this.mUISpreadsheetWindow4 = new UISpreadsheetWindow4();
                }
                return this.mUISpreadsheetWindow4;
            }
        }
        
        public UISpreadsheetWindow5 UISpreadsheetWindow5
        {
            get
            {
                if ((this.mUISpreadsheetWindow5 == null))
                {
                    this.mUISpreadsheetWindow5 = new UISpreadsheetWindow5();
                }
                return this.mUISpreadsheetWindow5;
            }
        }
        
        public UISpreadsheetWindow6 UISpreadsheetWindow6
        {
            get
            {
                if ((this.mUISpreadsheetWindow6 == null))
                {
                    this.mUISpreadsheetWindow6 = new UISpreadsheetWindow6();
                }
                return this.mUISpreadsheetWindow6;
            }
        }
        
        public UIHelpWindow UIHelpWindow
        {
            get
            {
                if ((this.mUIHelpWindow == null))
                {
                    this.mUIHelpWindow = new UIHelpWindow();
                }
                return this.mUIHelpWindow;
            }
        }
        
        public UISpreadsheetWindow7 UISpreadsheetWindow7
        {
            get
            {
                if ((this.mUISpreadsheetWindow7 == null))
                {
                    this.mUISpreadsheetWindow7 = new UISpreadsheetWindow7();
                }
                return this.mUISpreadsheetWindow7;
            }
        }
        
        public UISpreadsheetWindow8 UISpreadsheetWindow8
        {
            get
            {
                if ((this.mUISpreadsheetWindow8 == null))
                {
                    this.mUISpreadsheetWindow8 = new UISpreadsheetWindow8();
                }
                return this.mUISpreadsheetWindow8;
            }
        }
        
        public UISpreadsheetWindow9 UISpreadsheetWindow9
        {
            get
            {
                if ((this.mUISpreadsheetWindow9 == null))
                {
                    this.mUISpreadsheetWindow9 = new UISpreadsheetWindow9();
                }
                return this.mUISpreadsheetWindow9;
            }
        }
        
        public UISpreadsheetWindow10 UISpreadsheetWindow10
        {
            get
            {
                if ((this.mUISpreadsheetWindow10 == null))
                {
                    this.mUISpreadsheetWindow10 = new UISpreadsheetWindow10();
                }
                return this.mUISpreadsheetWindow10;
            }
        }
        
        public UISpreadsheetWindow13 UISpreadsheetWindow13
        {
            get
            {
                if ((this.mUISpreadsheetWindow13 == null))
                {
                    this.mUISpreadsheetWindow13 = new UISpreadsheetWindow13();
                }
                return this.mUISpreadsheetWindow13;
            }
        }
        
        public UISpreadsheetWindow14 UISpreadsheetWindow14
        {
            get
            {
                if ((this.mUISpreadsheetWindow14 == null))
                {
                    this.mUISpreadsheetWindow14 = new UISpreadsheetWindow14();
                }
                return this.mUISpreadsheetWindow14;
            }
        }
        
        public UISpreadsheetWindow15 UISpreadsheetWindow15
        {
            get
            {
                if ((this.mUISpreadsheetWindow15 == null))
                {
                    this.mUISpreadsheetWindow15 = new UISpreadsheetWindow15();
                }
                return this.mUISpreadsheetWindow15;
            }
        }
        
        public UISpreadsheetWindow16 UISpreadsheetWindow16
        {
            get
            {
                if ((this.mUISpreadsheetWindow16 == null))
                {
                    this.mUISpreadsheetWindow16 = new UISpreadsheetWindow16();
                }
                return this.mUISpreadsheetWindow16;
            }
        }
        
        public UISpreadsheetWindow17 UISpreadsheetWindow17
        {
            get
            {
                if ((this.mUISpreadsheetWindow17 == null))
                {
                    this.mUISpreadsheetWindow17 = new UISpreadsheetWindow17();
                }
                return this.mUISpreadsheetWindow17;
            }
        }
        
        public UISpreadsheetWindow18 UISpreadsheetWindow18
        {
            get
            {
                if ((this.mUISpreadsheetWindow18 == null))
                {
                    this.mUISpreadsheetWindow18 = new UISpreadsheetWindow18();
                }
                return this.mUISpreadsheetWindow18;
            }
        }
        
        public UISpreadsheetWindow21 UISpreadsheetWindow21
        {
            get
            {
                if ((this.mUISpreadsheetWindow21 == null))
                {
                    this.mUISpreadsheetWindow21 = new UISpreadsheetWindow21();
                }
                return this.mUISpreadsheetWindow21;
            }
        }
        #endregion
        
        #region Fields
        private NumberTestParams mNumberTestParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private StringTestParams mStringTestParams;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private OpenTestMethodExpectedValues mOpenTestMethodExpectedValues;
        
        private SaveAsParams mSaveAsParams;
        
        private sasExpectedValues msasExpectedValues;
        
        private TesttwostringParams mTesttwostringParams;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private CloseTestParams mCloseTestParams;
        
        private HelpParams mHelpParams;
        
        private NewParams mNewParams;
        
        private ClosenowParams mClosenowParams;
        
        private MultipleWindowsParams mMultipleWindowsParams;
        
        private ExitManyParams mExitManyParams;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UISpreadsheetWindow1 mUISpreadsheetWindow1;
        
        private UISpreadsheetWindow11 mUISpreadsheetWindow11;
        
        private UISpreadsheetWindow2 mUISpreadsheetWindow2;
        
        private UISpreadsheetWindow12 mUISpreadsheetWindow12;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UISaveAsWindow1 mUISaveAsWindow1;
        
        private UIOverwriteWindow mUIOverwriteWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UICUsersBrentDocumentsWindow1 mUICUsersBrentDocumentsWindow1;
        
        private UICloseWindowsWindow mUICloseWindowsWindow;
        
        private UISpreadsheetWindow3 mUISpreadsheetWindow3;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UISpreadsheetWindow4 mUISpreadsheetWindow4;
        
        private UISpreadsheetWindow5 mUISpreadsheetWindow5;
        
        private UISpreadsheetWindow6 mUISpreadsheetWindow6;
        
        private UIHelpWindow mUIHelpWindow;
        
        private UISpreadsheetWindow7 mUISpreadsheetWindow7;
        
        private UISpreadsheetWindow8 mUISpreadsheetWindow8;
        
        private UISpreadsheetWindow9 mUISpreadsheetWindow9;
        
        private UISpreadsheetWindow10 mUISpreadsheetWindow10;
        
        private UISpreadsheetWindow13 mUISpreadsheetWindow13;
        
        private UISpreadsheetWindow14 mUISpreadsheetWindow14;
        
        private UISpreadsheetWindow15 mUISpreadsheetWindow15;
        
        private UISpreadsheetWindow16 mUISpreadsheetWindow16;
        
        private UISpreadsheetWindow17 mUISpreadsheetWindow17;
        
        private UISpreadsheetWindow18 mUISpreadsheetWindow18;
        
        private UISpreadsheetWindow21 mUISpreadsheetWindow21;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'NumberTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class NumberTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "C:\\Users\\Brent\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '34' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditText = "34";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'textBox1' text box's property 'Text' equals '34'
        /// </summary>
        public string UITextBox1EditText = "34";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'StringTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class StringTestParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hi' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditText = "Hi";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'textBox1' text box's property 'Text' equals 'Hi'
        /// </summary>
        public string UITextBox1EditText = "Hi";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'D:\' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "D:\\";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'MyDemo.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "MyDemo.ss";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'adflfa' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditText = "adflfa";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'textBox1' text box's property 'Text' equals '34'
        /// </summary>
        public string UITextBox1EditText = "34";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenTestMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class OpenTestMethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'textBox1' text box's property 'Text' equals '34'
        /// </summary>
        public string UITextBox1EditText = "34";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAs'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class SaveAsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'shee2' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "shee2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'sas'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class sasExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'textBox1' text box's property 'Text' equals '2'
        /// </summary>
        public string UITextBox1EditText = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Testtwostring'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class TesttwostringParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow3ExePath = "C:\\Users\\Brent\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow3AlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'adf' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditText = "adf";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'textBox1' text box's property 'Text' equals 'vsdtyjh'
        /// </summary>
        public string UITextBox1EditText = "vsdtyjh";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow4ExePath = "C:\\Users\\Brent\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow4AlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '245' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditText = "245";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'SpreadSheet2' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "SpreadSheet2";
        
        /// <summary>
        /// Type 'sfgs' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditText1 = "sfgs";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CloseTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class CloseTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow7ExePath = "C:\\Users\\Brent\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow7AlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'sd' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditText = "sd";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Help'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class HelpParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow9ExePath = "C:\\Users\\Brent\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow9AlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'New'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class NewParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow10ExePath = "C:\\Users\\Brent\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow10AlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Closenow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class ClosenowParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow13ExePath = "C:\\Users\\Brent\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow13AlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MultipleWindows'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class MultipleWindowsParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow14ExePath = "C:\\Users\\Brent\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow14AlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '2' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditText = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '9' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditText1 = "9";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+B1' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditText2 = "=A1+B1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExitMany'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class ExitManyParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow17ExePath = "C:\\Users\\Brent\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug" +
            "\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindow17AlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'asdf' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditText = "asdf";
        
        /// <summary>
        /// Type 'Shift + {Enter}' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'ad' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "ad";
        
        /// <summary>
        /// Type 'dsfa' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditText1 = "dsfa";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 's' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys1 = "s";
        
        /// <summary>
        /// Type 'sdfas' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditText2 = "sdfas";
        
        /// <summary>
        /// Type '{Enter}' in 'textBox1' text box
        /// </summary>
        public string UITextBox1EditSendKeys2 = "{Enter}";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\SpreadSheet.ss");
            #endregion
        }
        
        #region Properties
        public UITextBox1Window UITextBox1Window
        {
            get
            {
                if ((this.mUITextBox1Window == null))
                {
                    this.mUITextBox1Window = new UITextBox1Window(this);
                }
                return this.mUITextBox1Window;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UITextBox1Window mUITextBox1Window;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITextBox1Window : WinWindow
    {
        
        public UITextBox1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox1Edit
        {
            get
            {
                if ((this.mUITextBox1Edit == null))
                {
                    this.mUITextBox1Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox1Edit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUITextBox1Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox1Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\SpreadSheet.ss");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\SpreadSheet.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\SpreadSheet.ss");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\SpreadSheet.ss");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUIExitMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow1 : WinWindow
    {
        
        public UISpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet*";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow11 : WinWindow
    {
        
        public UISpreadsheetWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UITextBox1Window1 UITextBox1Window
        {
            get
            {
                if ((this.mUITextBox1Window == null))
                {
                    this.mUITextBox1Window = new UITextBox1Window1(this);
                }
                return this.mUITextBox1Window;
            }
        }
        
        public UIMenuStrip1MenuBar2 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar2(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        #endregion
        
        #region Fields
        private UITextBox1Window1 mUITextBox1Window;
        
        private UIMenuStrip1MenuBar2 mUIMenuStrip1MenuBar;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITextBox1Window1 : WinWindow
    {
        
        public UITextBox1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox1Edit
        {
            get
            {
                if ((this.mUITextBox1Edit == null))
                {
                    this.mUITextBox1Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox1Edit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUITextBox1Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox1Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar2 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet*");
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem2 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem2(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem2 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem2 : WinMenuItem
    {
        
        public UIFileMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet*");
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUIExitMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow2 : WinWindow
    {
        
        public UISpreadsheetWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet*";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UITextBox1Window2 UITextBox1Window
        {
            get
            {
                if ((this.mUITextBox1Window == null))
                {
                    this.mUITextBox1Window = new UITextBox1Window2(this);
                }
                return this.mUITextBox1Window;
            }
        }
        
        public UIMenuStrip1MenuBar3 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar3(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UITextBox1Window2 mUITextBox1Window;
        
        private UIMenuStrip1MenuBar3 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITextBox1Window2 : WinWindow
    {
        
        public UITextBox1Window2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox1";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox1Edit
        {
            get
            {
                if ((this.mUITextBox1Edit == null))
                {
                    this.mUITextBox1Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox1Edit.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUITextBox1Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox1Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar3 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem3 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem3(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem3 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem3 : WinMenuItem
    {
        
        public UIFileMenuItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow12 : WinWindow
    {
        
        public UISpreadsheetWindow12()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIItemWindow mUIItemWindow;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISaveAsWindow1 : WinWindow
    {
        
        public UISaveAsWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UISaveAsPane UISaveAsPane
        {
            get
            {
                if ((this.mUISaveAsPane == null))
                {
                    this.mUISaveAsPane = new UISaveAsPane(this);
                }
                return this.mUISaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UISaveAsPane mUISaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISaveAsPane : WinPane
    {
        
        public UISaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Save As";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOverwriteWindow : WinWindow
    {
        
        public UIOverwriteWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Overwrite";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Overwrite");
            #endregion
        }
        
        #region Properties
        public UINOWindow1 UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow1(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UIYesWindow1 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow1(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow1 mUINOWindow;
        
        private UIYesWindow1 mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UINOWindow1 : WinWindow
    {
        
        public UINOWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Overwrite");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Overwrite");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIYesWindow1 : WinWindow
    {
        
        public UIYesWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Overwrite");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Overwrite");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UISpreadSheetListItem UISpreadSheetListItem
        {
            get
            {
                if ((this.mUISpreadSheetListItem == null))
                {
                    this.mUISpreadSheetListItem = new UISpreadSheetListItem(this);
                }
                return this.mUISpreadSheetListItem;
            }
        }
        
        public UIMyDemoListItem UIMyDemoListItem
        {
            get
            {
                if ((this.mUIMyDemoListItem == null))
                {
                    this.mUIMyDemoListItem = new UIMyDemoListItem(this);
                }
                return this.mUIMyDemoListItem;
            }
        }
        
        public UIShee2ListItem UIShee2ListItem
        {
            get
            {
                if ((this.mUIShee2ListItem == null))
                {
                    this.mUIShee2ListItem = new UIShee2ListItem(this);
                }
                return this.mUIShee2ListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadSheetListItem mUISpreadSheetListItem;
        
        private UIMyDemoListItem mUIMyDemoListItem;
        
        private UIShee2ListItem mUIShee2ListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadSheetListItem : WinListItem
    {
        
        public UISpreadSheetListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadSheet";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMyDemoListItem : WinListItem
    {
        
        public UIMyDemoListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "MyDemo";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIShee2ListItem : WinListItem
    {
        
        public UIShee2ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "shee2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UICUsersBrentDocumentsWindow1 : WinWindow
    {
        
        public UICUsersBrentDocumentsWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\Brent\\Documents\\Visual Studio 2010\\MyDemo.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\MyDemo.ss");
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\shee2.ss");
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\shee2.ss*");
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\SpreadSheet2.ss");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar4 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar4(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIItem2Window UIItem2Window
        {
            get
            {
                if ((this.mUIItem2Window == null))
                {
                    this.mUIItem2Window = new UIItem2Window(this);
                }
                return this.mUIItem2Window;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar4 mUIMenuStrip1MenuBar;
        
        private UIItem2Window mUIItem2Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar4 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\MyDemo.ss");
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\shee2.ss");
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\shee2.ss*");
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\SpreadSheet2.ss");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem4 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem4(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem4 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem4 : WinMenuItem
    {
        
        public UIFileMenuItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\MyDemo.ss");
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\shee2.ss");
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\shee2.ss*");
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\SpreadSheet2.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\MyDemo.ss");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\shee2.ss");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\SpreadSheet2.ss");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveAsMenuItem;
        
        private WinMenuItem mUIExitMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItem2Window : WinWindow
    {
        
        public UIItem2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox1";
            this.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\shee2.ss");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox1Edit
        {
            get
            {
                if ((this.mUITextBox1Edit == null))
                {
                    this.mUITextBox1Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox1Edit.WindowTitles.Add("C:\\Users\\Brent\\Documents\\Visual Studio 2010\\shee2.ss");
                    #endregion
                }
                return this.mUITextBox1Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox1Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UICloseWindowsWindow : WinWindow
    {
        
        public UICloseWindowsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Close Windows";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Close Windows");
            #endregion
        }
        
        #region Properties
        public UIYesWindow2 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow2(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow2 mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIYesWindow2 : WinWindow
    {
        
        public UIYesWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Close Windows");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Close Windows");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow3 : WinWindow
    {
        
        public UISpreadsheetWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow4 : WinWindow
    {
        
        public UISpreadsheetWindow4()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow5 : WinWindow
    {
        
        public UISpreadsheetWindow5()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar5 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar5(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar5 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar5 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIFileMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
                    this.mUIFileMenuItem.WindowTitles.Add("Spreadsheet");
                    this.mUIFileMenuItem.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow6 : WinWindow
    {
        
        public UISpreadsheetWindow6()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar6 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar6(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar6 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar6 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    this.mUIHelpMenuItem.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIHelpWindow : WinWindow
    {
        
        public UIHelpWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Help";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Help");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Help");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow7 : WinWindow
    {
        
        public UISpreadsheetWindow7()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow8 : WinWindow
    {
        
        public UISpreadsheetWindow8()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar7 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar7(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar7 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar7 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem5 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem5(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem5 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem5 : WinMenuItem
    {
        
        public UIFileMenuItem5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow9 : WinWindow
    {
        
        public UISpreadsheetWindow9()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow10 : WinWindow
    {
        
        public UISpreadsheetWindow10()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow13 : WinWindow
    {
        
        public UISpreadsheetWindow13()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow14 : WinWindow
    {
        
        public UISpreadsheetWindow14()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow15 : WinWindow
    {
        
        public UISpreadsheetWindow15()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow16 : WinWindow
    {
        
        public UISpreadsheetWindow16()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar8 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar8(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar8 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar8 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem6 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem6(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem6 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem6 : WinMenuItem
    {
        
        public UIFileMenuItem6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow17 : WinWindow
    {
        
        public UISpreadsheetWindow17()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow18 : WinWindow
    {
        
        public UISpreadsheetWindow18()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar9 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar9(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar9 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar9 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem7 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem7(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem7 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem7 : WinMenuItem
    {
        
        public UIFileMenuItem7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetWindow21 : WinWindow
    {
        
        public UISpreadsheetWindow21()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "3";
            this.WindowTitles.Add("Spreadsheet");
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetPanel1Window1 UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window1(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UITextBox1Window3 UITextBox1Window
        {
            get
            {
                if ((this.mUITextBox1Window == null))
                {
                    this.mUITextBox1Window = new UITextBox1Window3(this);
                }
                return this.mUITextBox1Window;
            }
        }
        
        public UIMenuStrip1MenuBar10 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar10(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetPanel1Window1 mUISpreadsheetPanel1Window;
        
        private UITextBox1Window3 mUITextBox1Window;
        
        private UIMenuStrip1MenuBar10 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UISpreadsheetPanel1Window1 : WinWindow
    {
        
        public UISpreadsheetPanel1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UITextBox1Window3 : WinWindow
    {
        
        public UITextBox1Window3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "textBox1";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UITextBox1Edit
        {
            get
            {
                if ((this.mUITextBox1Edit == null))
                {
                    this.mUITextBox1Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITextBox1Edit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUITextBox1Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITextBox1Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIMenuStrip1MenuBar10 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem8 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem8(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem8 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.40219.415")]
    public class UIFileMenuItem8 : WinMenuItem
    {
        
        public UIFileMenuItem8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("Spreadsheet*");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIExitMenuItem;
        #endregion
    }
}
